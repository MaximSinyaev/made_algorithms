"""
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–æ—à–∏—Ç—ã–π –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö–µ—à —Ç–∞–±–ª–∏—Ü—ã.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100000. –í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö
–æ–ø–µ—Ä–∞—Ü–∏–π:

    put ùë• ùë¶ ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á—É ùë• –∑–Ω–∞—á–µ–Ω–∏–µ ùë¶. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å.
    delete ùë• ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á ùë•. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ ùë• –Ω–µ—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ.
    get ùë• ‚Äî –µ—Å–ª–∏ –∫–ª—é—á ùë• –µ—Å—Ç—å –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç –≤—ã–≤–µ–¥–∏—Ç–µ ¬´none¬ª.
    prev ùë• ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–ª—é—á—É –Ω–∞—Ö–æ–¥—è—â–µ–º—É—Å—è –≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ
        –≤—Å–µ—Ö, –Ω–æ –¥–æ ùë• –∏–ª–∏ ¬´none¬ª, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç –∏–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç ùë•.
    next ùë• ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–ª—é—á—É –Ω–∞—Ö–æ–¥—è—â–µ–º—É—Å—è –≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—Å—Ç–∞–≤–ª–µ–Ω —Ä–∞–Ω—å—à–µ
        –≤—Å–µ—Ö, –Ω–æ –ø–æ—Å–ª–µ ùë• –∏–ª–∏ ¬´none¬ª, –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç –∏–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç ùë•.

–ö–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π get, prev, next.
–°–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞.
"""
import sys


SEPARATOR = "\n"
UNICODE = "utf-8"

class Node:
    def __init__(self, key, val, next=None, prev=None):
        self.key = key
        self.val = val
        self.next = next
        self.prev = prev

    def __repr__(self):
        return f"{self.key}: {self.val}"


class LinkedMap:
    A = 31
    P = 1073676287
    EMPTY = list

    def __init__(self):
        self.size = 10 ** 5
        self.count = 0
        self.last = None
        self.data = [None] * self.size

    def hash(self, val: str):
        a_pow = 1
        res = 0
        for i in val:
            res = (res + ord(i) * a_pow) % self.P
            a_pow = ((a_pow * self.A) % self.P)
        res = res % self.size
        return res

    def put(self, key, val):
        h = self.hash(key)
        if self.data[h]:
            for i, node in enumerate(self.data[h]):
                if key == node.key:
                    self.data[h][i].val = val
                    return
        # –¢–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ –±—ã–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        self.count += 1
        new_el = Node(key, val, prev=self.last)
        if self.last:
            self.last.next = new_el
        self.last = new_el
        if not self.data[h]:
            self.data[h] = self.EMPTY()
        self.data[h].append(new_el)

    def get(self, key):
        h = self.hash(key)
        if self.data[h]:
            for node in self.data[h]:
                if key == node.key:
                    return node.val
        return 'none'

    def get_next(self, key):
        h = self.hash(key)
        if self.data[h]:
            for node in self.data[h]:
                if key == node.key:
                    return node.next.val if node.next else 'none'
        return 'none'

    def get_prev(self, key):
        h = self.hash(key)
        if self.data[h]:
            for node in self.data[h]:
                if key == node.key:
                    return node.prev.val if node.prev else 'none'
        return 'none'

    def delete(self, key):
        self.count -= 1
        h = self.hash(key)
        if self.data[h]:
            for i, node in enumerate(self.data[h]):
                if key == node.key:
                    if id(self.last) == id(self.data[h][i]):
                        self.last = self.data[h][i].prev
                    if self.data[h][i].prev:
                        self.data[h][i].prev.next = self.data[h][i].next
                    if self.data[h][i].next:
                        self.data[h][i].next.prev = self.data[h][i].prev
                    self.data[h].pop(i)
                    break


if __name__ == '__main__':
    raw_input = sys.stdin.buffer.read().splitlines()
    result_exists = list()
    linked_map = LinkedMap()

    for operation in raw_input:
        args = operation.decode(UNICODE).split()
        if args[0] == "put":
            linked_map.put(args[1], args[2])
        elif args[0] == "delete":
            linked_map.delete(args[1])
        elif args[0] == "get":
            res = linked_map.get(args[1])
            result_exists.append(res)
        elif args[0] == "next":
            res = linked_map.get_next(args[1])
            result_exists.append(res)
        elif args[0] == "prev":
            res = linked_map.get_prev(args[1])
            result_exists.append(res)

    encoded_array = (SEPARATOR.join(result_exists)).encode(UNICODE)
    sys.stdout.buffer.write(encoded_array + '\n'.encode(UNICODE))