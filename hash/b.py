"""
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö–µ—à —Ç–∞–±–ª–∏—Ü—ã.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100000. –í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö
–æ–ø–µ—Ä–∞—Ü–∏–π:
    put ùë• ùë¶ ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á—É ùë• –∑–Ω–∞—á–µ–Ω–∏–µ ùë¶. –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å.
    delete ùë• ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á ùë•. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ ùë• –Ω–µ—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ.
    get ùë• ‚Äî –µ—Å–ª–∏ –∫–ª—é—á ùë• –µ—Å—Ç—å –≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ, —Ç–æ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –≤—ã–≤–µ–¥–∏—Ç–µ ¬´none¬ª.

–ö–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π get. –°–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞.
"""
import sys

SEPARATOR = "\n"
UNICODE = "utf-8"


class MyMap:
    # A = random.randint(1, 100)
    A = 17
    P = 1073676287
    EMPTY = list

    def __init__(self):
        self.size = 10 ** 5
        self.count = 0
        self.data = [None] * self.size

    def hash(self, val: str):
        a_pow = 1
        res = 0
        for i in val:
            res = (res + ord(i) * a_pow) % self.P
            a_pow = ((a_pow * self.A) % self.P)
        res = res % self.size
        return res

    def put(self, key, val):
        self.count += 1
        h = self.hash(key)
        # print(key, h)
        if not self.data[h]:
            self.data[h] = self.EMPTY()
            self.data[h].append((key, val))
            return
        for i, (key_from_list, val_from_list) in enumerate(self.data[h]):
            if key == key_from_list:
                self.data[h][i] = (key, val)
                return
        self.data[h].append((key, val))

    def get(self, key):
        h = self.hash(key)
        if self.data[h]:
            for key_from_list, val_from_list in self.data[h]:
                if key == key_from_list:
                    return val_from_list
        return 'none'

    def delete(self, key):
        h = self.hash(key)
        if self.data[h]:
            for i, (key_from_list, val_from_list) in enumerate(self.data[h]):
                if key == key_from_list:
                    self.data[h].pop(i)
                    break


if __name__ == '__main__':
    raw_input = sys.stdin.buffer.read().splitlines()
    result_exists = list()
    my_map = MyMap()
    for operation in raw_input:
        args = operation.decode(UNICODE).split()
        if args[0] == "put":
            my_map.put(args[1], args[2])
        elif args[0] == "delete":
            my_map.delete(args[1])
        elif args[0] == "get":
            res = my_map.get(args[1])
            result_exists.append(res)
    # print(my_map.data)
    encoded_array = (SEPARATOR.join(result_exists)).encode(UNICODE)
    sys.stdout.buffer.write(encoded_array + '\n'.encode(UNICODE))
