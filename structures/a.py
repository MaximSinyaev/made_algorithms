"""
–í–∞–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –≤—ã–ø–æ–ª–Ω—è—é—â—É—é —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:

    –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç ùë• –≤ –∫–æ–Ω–µ—Ü —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
    –í—ã–¥–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–¥–∞–Ω–æ –æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùëõ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π (1‚â§ùëõ‚â§106). –í —Å–ª–µ–¥—É—é—â–∏—Ö ùëõ —Å—Ç—Ä–æ–∫–∞—Ö –∑–∞–¥–∞–Ω—ã
—Å–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –í ùëñ‚Äì–æ–π —Å—Ç—Ä–æ–∫–µ —á–∏—Å–ª–æ ùë°ùëñ ‚Äî —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (1, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. 2, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è. 3,
–µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –º–∏–Ω–∏–º—É–º–∞). –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, —Ç–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∑–∞–ø–∏—Å–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùë• ‚Äî —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π
—Å–ª–µ–¥—É–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É (‚àí109‚â§ùë•‚â§109). –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–µ–π —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞
—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –ø—É—Å—Ç–∞.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–î–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–∞ –≤—ã–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ. –û—Ç–≤–µ—Ç—ã —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º —Å—Ç—Ä–æ–∫–∏.
"""
import sys


class Node:
    def __init__(self, data, prev=None):
        self.data = data
        self.min_el = min(data, prev.min_el) if prev else data
        self.next = None
        self.prev = prev

    def __str__(self):
        return f"{self.data}"


class LinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def append(self, data):
        if self.head is None:
            self.head = Node(data)
            self.tail = self.head
        else:
            self.tail.next = Node(data, self.tail)
            self.tail = self.tail.next
        self.size += 1

    def pop(self):
        if self.size == 1:
            del self.head
            self.head = self.tail = None
        else:
            self.tail = self.tail.prev
            self.tail.next = None
        self.size -= 1

    def find_min(self):
        return self.tail.min_el


if __name__ == '__main__':
    raw_input = sys.stdin.read().splitlines()
    n = int(raw_input[0])
    linked_list = LinkedList()
    for i in range(n):
        op = [_ for _ in raw_input[1 + i].split()]
        if op[0] == "1":
            linked_list.append(int(op[1]))
        elif op[0] == "2":
            linked_list.pop()
        elif op[0] == "3":
            sys.stdout.write(str(linked_list.find_min()) + "\n")
